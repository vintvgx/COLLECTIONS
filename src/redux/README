create model -> add actions -> export index -> create reducer class (e.g. userReducer) -> index reducer (combine reducers) -> reducer is added to store.ts and exported by index.ts (all indexes carry parent functions)
--> call mapToStateProps in screen function


STEPS TO CREATING + USING REDUCERS

1. create model for the reducer 

2. create action class to specify actions for reducers

3. export from actions/index

4. create reducer class (e.g. userReducer)  

5. reducer/index reducer (combine reducers)

6. reducer is added to store.ts and exported by index.ts (all indexes carry parent functions)

7. call reducers from screens/components 
       - set it up using interface and props

interface LandingProps{
    userReducer: UserState,
    onUpdateLocation: Function
    
}

const _LandingScreen: React.FC<LandingProps> = (props) => {

     const { userReducer, onUpdateLocation }  = props;


8. call mapToStateProps at the end of the class to connect to state

const mapToStateProps = (state: ApplicationState) => ({
    userReducer: state.userReducer
 })

const LandingScreen = connect(mapToStateProps, { onUpdateLocation })(_LandingScreen)

export { LandingScreen }

9. calling actions within functions

"onUpdateLocation(item)"

was called in a for loop once the location is retrieved and coordinates have been found 